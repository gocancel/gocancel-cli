// Code generated by MockGen. DO NOT EDIT.
// Source: letters.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gocancel "github.com/gocancel/gocancel-go"
	gomock "github.com/golang/mock/gomock"
)

// MockLettersService is a mock of LettersService interface.
type MockLettersService struct {
	ctrl     *gomock.Controller
	recorder *MockLettersServiceMockRecorder
}

// MockLettersServiceMockRecorder is the mock recorder for MockLettersService.
type MockLettersServiceMockRecorder struct {
	mock *MockLettersService
}

// NewMockLettersService creates a new mock instance.
func NewMockLettersService(ctrl *gomock.Controller) *MockLettersService {
	mock := &MockLettersService{ctrl: ctrl}
	mock.recorder = &MockLettersServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLettersService) EXPECT() *MockLettersServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockLettersService) Create(request *gocancel.LetterRequest) (*gocancel.Letter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", request)
	ret0, _ := ret[0].(*gocancel.Letter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockLettersServiceMockRecorder) Create(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockLettersService)(nil).Create), request)
}

// Get mocks base method.
func (m *MockLettersService) Get(letterID string) (*gocancel.Letter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", letterID)
	ret0, _ := ret[0].(*gocancel.Letter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockLettersServiceMockRecorder) Get(letterID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockLettersService)(nil).Get), letterID)
}

// List mocks base method.
func (m *MockLettersService) List() ([]*gocancel.Letter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]*gocancel.Letter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockLettersServiceMockRecorder) List() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockLettersService)(nil).List))
}
