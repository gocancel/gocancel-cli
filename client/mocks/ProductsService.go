// Code generated by MockGen. DO NOT EDIT.
// Source: products.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gocancel "github.com/gocancel/gocancel-go"
	gomock "github.com/golang/mock/gomock"
)

// MockProductsService is a mock of ProductsService interface.
type MockProductsService struct {
	ctrl     *gomock.Controller
	recorder *MockProductsServiceMockRecorder
}

// MockProductsServiceMockRecorder is the mock recorder for MockProductsService.
type MockProductsServiceMockRecorder struct {
	mock *MockProductsService
}

// NewMockProductsService creates a new mock instance.
func NewMockProductsService(ctrl *gomock.Controller) *MockProductsService {
	mock := &MockProductsService{ctrl: ctrl}
	mock.recorder = &MockProductsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductsService) EXPECT() *MockProductsServiceMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockProductsService) Get(productID string) (*gocancel.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", productID)
	ret0, _ := ret[0].(*gocancel.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockProductsServiceMockRecorder) Get(productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockProductsService)(nil).Get), productID)
}
