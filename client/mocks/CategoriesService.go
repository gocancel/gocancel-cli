// Code generated by MockGen. DO NOT EDIT.
// Source: categories.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gocancel "github.com/gocancel/gocancel-go"
	gomock "github.com/golang/mock/gomock"
)

// MockCategoriesService is a mock of CategoriesService interface.
type MockCategoriesService struct {
	ctrl     *gomock.Controller
	recorder *MockCategoriesServiceMockRecorder
}

// MockCategoriesServiceMockRecorder is the mock recorder for MockCategoriesService.
type MockCategoriesServiceMockRecorder struct {
	mock *MockCategoriesService
}

// NewMockCategoriesService creates a new mock instance.
func NewMockCategoriesService(ctrl *gomock.Controller) *MockCategoriesService {
	mock := &MockCategoriesService{ctrl: ctrl}
	mock.recorder = &MockCategoriesServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCategoriesService) EXPECT() *MockCategoriesServiceMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockCategoriesService) Get(categoryID string) (*gocancel.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", categoryID)
	ret0, _ := ret[0].(*gocancel.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCategoriesServiceMockRecorder) Get(categoryID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCategoriesService)(nil).Get), categoryID)
}

// List mocks base method.
func (m *MockCategoriesService) List(opts *gocancel.CategoriesListOptions) ([]*gocancel.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", opts)
	ret0, _ := ret[0].([]*gocancel.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockCategoriesServiceMockRecorder) List(opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockCategoriesService)(nil).List), opts)
}
